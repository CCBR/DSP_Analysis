---
title: "DSP DE Analysis Template"
format:
  html:
    code-fold: true
editor: visual

params:
  data.folder: "$path_to_folder"
  QC.folder: "$path_to_folder"
  results.folder: "$path_to_folder"
  run.folder: "$path_to_folder"
---

# DE Analysis - Vessel

```{r Setup}
#| warning: false
#| message: false

library(GeomxTools)
library(dplyr)
library(limma)
library(edgeR)
library(ggplot2)
library(ggrepel)
library(stringr)
library(PCAtools)
library(readxl)
library(gridExtra)
library(grid)
library(DSPWorkflow)

# Source the helper functions
source("DSP_functions.R")

results.folder <- "$path_to_folder"
data.folder <- "$path_to_folder"
QC.folder <- "$path_to_folder"
run.folder <- "$path_to_folder"

DE.results.folder <- paste0(results.folder, run.folder)
DE.results.files <- list.files(DE.results.folder)
```

### Load the Normalized Counts and Annotation

```{r Load Normalized Counts}

normalized.object.list <- get(load(file = paste0(params$QC.folder,
                                       "$normalized.object.RDA")))

```

### Set up the Annotation Colors

```{r Annotation Colors}

# Set up annotation colors for the heatmaps
anno.colors = list(
      Treatment_group = c(C = "slateblue", 
                T1 = "coral", 
                T2 = "seagreen1", 
                T3 = "cadetblue1", 
                T4 = "pink")
      )
```

### Run DE

#### T1 vs. C

```{r DE contrast: T1 vs. C}
#| warning: false
#| message: false

# Setup annotation groups for the contrast
# Order is Condition, Reference
contrast.groups <- c("T1", "C")

contrast.field <- "Treatment_group"

# Define the name of the contrast
contrast.name <- paste0(contrast.groups[[2]], 
                        "_", 
                        contrast.groups[[1]])

# Gather the column names to be used in defining contrasts
contrast.groups.list <- list()

contrast.groups.list[[contrast.field]] = contrast.groups
 


# Filter data for the chosen annotations
object <- normalized.object.list$object

# Generate the counts, annotation, and subset object for lmm
lmm.input <- subset_object_for_lmm(object = object, 
                            subset.list = contrast.groups.list)

# Create summary table of group counts
summary.table.df <- pData(lmm.input$subset.object) %>%  
  select(c(names(contrast.groups.list)))

summary.table <- table(summary.table.df)

print("Sample Numbers per Annotation Group")
print("-----------------------------------")
print(summary.table)

# Check if the DE results have already been generated
DE.result.file <- grepl(contrast.name, DE.results.files)
if(sum(DE.result.file) == 1) {
  
  # Load the previously generated DE results
  results.df <- as.data.frame(read.csv(paste0(results.folder, run.folder, contrast.name, "_de.results.csv")))
                              
} else {
  # Use the function from the DSPWorkflow package

  # Within slide analysis
  # Listed contrasts are condition, reference 
  results.list <- diffExpr(object = lmm.input$subset.object, 
                        analysis.type = "Within Groups", 
                        region.col = "Treatment_group", 
                        regions = c("T1", "C"), 
                        group.col = "region", 
                        groups = c("region_B"), 
                        n.cores = parallel::detectCores())
  
  # Create the results df
  results.df <- results.list$results
  
  write.results <- FALSE
  if(write.results == TRUE){
    write.csv(results.df, paste0(results.folder, run.folder, contrast.name, "_de.results.csv"))
  }
  
  
}

# Adjust column names
logfc.column <- colnames(results.df[grepl("logFC",colnames(results.df))])
results.df$logfc <- results.df[[logfc.column]]

pval.column <- colnames(results.df[grepl("_pval",colnames(results.df))])
results.df$pval <- results.df[[pval.column]]

adj.pval.column <- colnames(results.df[grepl("adjpval",colnames(results.df))])
results.df$padj <- results.df[[adj.pval.column]]

results.df$gene <- results.df$Gene

# Keep only the necessary columns
results.df <- results.df %>% select(c("gene", 
                                      "logfc", 
                                      "pval", 
                                      "padj"))


# Export the results
export.deg.list <- FALSE
if(export.deg.list == TRUE){ 
  write.csv(results.df, 
            file = paste0(results.folder, run.folder, "DE/DEG_lists/", contrast.name, "_deg_list.csv"), 
            row.names = FALSE)  
}

# Make the volcano plot
volcano.output <- make_volcano(lmm.results = results.df, 
                               title = contrast.name, 
                               legend.title = "Expression in T1", 
                               x.axis.title = "logFC: C (cond) versus T1 (ref)", 
                               fc.limit = 1, 
                               pos.label.limit = 1, 
                               neg.label.limit = -1)

# Export the volcano
export.volcano <- FALSE
if(export.volcano == TRUE){ 
  ggsave(filename = paste0(results.folder, run.folder, "DE/volcano/", contrast.name, "_volcano_plot.png"), 
         width = 14, 
         height = 10)
}

print(volcano.output$volcano.plot)

# Subset the annotation just for the heatmap annotations of interest
annotation.heatmap <- lmm.input$annotation %>% 
  select(names(anno.colors)) %>% 
  arrange(Treatment_group)

heatmap.plot <- make_heatmap(
  normalized.log.counts.df = lmm.input$log.counts, 
  de.results = results.df, 
  top.degs = TRUE, 
  annotation.column = annotation.heatmap,
  annotation.row = NULL, 
  anno.colors = anno.colors, 
  cluster.rows = TRUE, 
  cluster.columns = TRUE, 
  main.title = contrast.name, 
  row.gaps = NULL, 
  column.gaps = NULL, 
  show.colnames = FALSE, 
  show.rownames = TRUE)

print(heatmap.plot)

export.heatmap <- FALSE
if(export.heatmap == TRUE){
  
  ggsave(heatmap.plot, 
         filename = paste0(results.folder, run.folder, "DE/heatmap/", contrast.name, "_heatmap_plot.png"), 
         width = 14, 
         height = 10)
  
}

# GSEA Preranked List

gsea.preranked.df <- gsea_preranked_list(contrast.field = contrast.field, 
                                         contrast.levels = contrast.groups, 
                                         annotation = lmm.input$annotation,
                                         log.counts = lmm.input$log.counts)

export.gsea.input <- FALSE
if(export.gsea.input == TRUE){
  
  write.csv(GSEA.preanked.df, file = paste0(results.folder, run.folder, "GSEA/", contrast.name, "_gsea_preranked_input.csv"), row.names = FALSE)
  
}

```

#### T4 vs. C

```{r DE contrast: T4 vs. C}
#| warning: false
#| message: false

# Setup annotation groups for the contrast
# Order is Condition, Reference
contrast.groups <- c("T4", "C")

contrast.field <- "Treatment_group"

# Define the name of the contrast
contrast.name <- paste0(contrast.groups[[2]], 
                        "_", 
                        contrast.groups[[1]])

# Gather the column names to be used in defining contrasts
contrast.groups.list <- list()

contrast.groups.list[[contrast.field]] = contrast.groups
 


# Filter data for the chosen annotations
object <- normalized.object.list$object

# Generate the counts, annotation, and subset object for lmm
lmm.input <- subset_object_for_lmm(object = object, 
                            subset.list = contrast.groups.list)

# Create summary table of group counts
summary.table.df <- pData(lmm.input$subset.object) %>%  
  select(c(names(contrast.groups.list)))

summary.table <- table(summary.table.df)

print("Sample Numbers per Annotation Group")
print("-----------------------------------")
print(summary.table)

# Check if the DE results have already been generated
DE.result.file <- grepl(contrast.name, DE.results.files)
if(sum(DE.result.file) == 1) {
  
  # Load the previously generated DE results
  results.df <- as.data.frame(read.csv(paste0(results.folder, run.folder, contrast.name, "_de.results.csv")))
                              
} else {
  # Use the function from the DSPWorkflow package

  # Within slide analysis
  # Listed contrasts are condition, reference 
  results.list <- diffExpr(object = lmm.input$subset.object, 
                        analysis.type = "Within Groups", 
                        region.col = "Treatment_group", 
                        regions = c("T4", "C"), 
                        group.col = "region", 
                        groups = c("region_B"), 
                        n.cores = parallel::detectCores())
  
  # Create the results df
  results.df <- results.list$results
  
  write.results <- TRUE
  if(write.results == TRUE){
    write.csv(results.df, paste0(results.folder, run.folder, contrast.name, "_de.results.csv"))
  }
  
  
}

# Adjust column names
logfc.column <- colnames(results.df[grepl("logFC",colnames(results.df))])
results.df$logfc <- results.df[[logfc.column]]

pval.column <- colnames(results.df[grepl("_pval",colnames(results.df))])
results.df$pval <- results.df[[pval.column]]

adj.pval.column <- colnames(results.df[grepl("adjpval",colnames(results.df))])
results.df$padj <- results.df[[adj.pval.column]]

results.df$gene <- results.df$Gene

# Keep only the necessary columns
results.df <- results.df %>% select(c("gene", 
                                      "logfc", 
                                      "pval", 
                                      "padj"))


# Export the results
export.deg.list <- FALSE
if(export.deg.list == TRUE){ 
  write.csv(results.df, 
            file = paste0(results.folder, run.folder, "DE/DEG_lists/", contrast.name, "_deg_list.csv"), 
            row.names = FALSE)  
}

# Make the volcano plot
volcano.output <- make_volcano(lmm.results = results.df, 
                               title = contrast.name, 
                               legend.title = "Expression in T4", 
                               x.axis.title = "logFC: C (Ref) versus T4 (Cond)", 
                               fc.limit = 1, 
                               pos.label.limit = 1, 
                               neg.label.limit = -1)

# Export the volcano
export.volcano <- FALSE
if(export.volcano == TRUE){ 
  ggsave(filename = paste0(results.folder, run.folder, "DE/volcano/", contrast.name, "_volcano_plot.png"), 
         width = 14, 
         height = 10)
}

print(volcano.output$volcano.plot)

# Subset the annotation just for the heatmap annotations of interest
annotation.heatmap <- lmm.input$annotation %>% 
  select(names(anno.colors)) %>% 
  arrange(Treatment_group)

heatmap.plot <- make_heatmap(
  normalized.log.counts.df = lmm.input$log.counts, 
  de.results = results.df, 
  top.degs = TRUE, 
  annotation.column = annotation.heatmap,
  annotation.row = NULL, 
  anno.colors = anno.colors, 
  cluster.rows = TRUE, 
  cluster.columns = TRUE, 
  main.title = contrast.name, 
  row.gaps = NULL, 
  column.gaps = NULL, 
  show.colnames = FALSE, 
  show.rownames = TRUE)

print(heatmap.plot)

export.heatmap <- FALSE
if(export.heatmap == TRUE){
  
  ggsave(heatmap.plot, 
         filename = paste0(results.folder, run.folder, "DE/heatmap/", contrast.name, "_heatmap_plot.png"), 
         width = 14, 
         height = 10)
  
}



```

### Venn Diagrams for log FC cutoff of 1

```{r Setup Gene Lists log FC 1}
#| warning: false
#| message: false

# Load all DE results
results.files <- list.files(paste0(results.folder, run.folder))

up.results.list <- list()
down.results.list <- list()

logfc.cutoff <- 1

results.files <- results.files[grepl(".csv", results.files)]


for(file in results.files){
  
  # Load the results for a DE contrast
  de.results <- as.data.frame(read.csv(paste0(results.folder, run.folder, file)))
  
  # Filter for DEGs for up and down regulated
  logfc.column <- colnames(de.results)[grep("logFC", colnames(de.results))]
  adj.pval.column <- colnames(de.results)[grep("adjpval", colnames(de.results))]
  
  up.degs.data <- de.results %>% 
    filter(.data[[logfc.column]] > logfc.cutoff) %>% 
    filter(.data[[adj.pval.column]] < 0.05)
  
  down.degs.data <- de.results %>% 
  filter(.data[[logfc.column]] < -(logfc.cutoff)) %>% 
  filter(.data[[adj.pval.column]] < 0.05)
  
  # Gather the DE gene names and store
  up.degs <- up.degs.data$Gene
  down.degs <- down.degs.data$Gene
  
  contrast.name <- gsub("_de.results.csv", "", file)
  contrast.name <- gsub("_", " vs. ", contrast.name)
  
  if(length(up.degs) > 0){
    
    up.results.list[[contrast.name]] <- up.degs
    
  } else {
    
    # For group with no DEGs
    up.results.list[[contrast.name]] <- "no DEGs"
    
  }
  
  if(length(down.degs) > 0){
    
    down.results.list[[contrast.name]] <- down.degs
    
  } else {
    
    # For group with no DEGs
    down.results.list[[contrast.name]] <- "no DEGs"
    
  }
  
}
```

#### Up-regulated Venn Diagram

```{r Create venn diagram for up degs log FC 1}
#| warning: false
#| message: false


venn.up.degs <- venn.diagram(up.results.list, 
                            main = "Up-regulated DEGs each DE Contrast",
                            category.names = c(names(up.results.list)[1],
                                               names(up.results.list)[2], 
                                               names(up.results.list)[3], 
                                               names(up.results.list)[4]), 
                            fill = c("maroon", 
                                     "#E69F00", 
                                     "#56B4E9", 
                                     "#009E73"), 
                            filename = NULL)


grid.draw(venn.up.degs)
```
